# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui1.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from os import path

from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np
import requests
import json 
import jsonpickle

from PyQt5 import QtCore
from PyQt5 import QtWidgets
from PyQt5 import QtGui
from PyQt5.QtWidgets import QApplication,QTabWidget, QWidget, QPushButton, QHBoxLayout,QVBoxLayout,QSlider,QLabel,QMessageBox,QInputDialog,QListWidget,QTextEdit,QDialog

addr = 'http://localhost:5000'
test_url = addr + '/post'
get_url = addr + '/get_data'
train_url = addr + '/train'
# prepare headers for http request
content_type = 'image/jpeg'
headers = {'content-type': content_type}
run_mode = False
train_mode = False
train_person = ""
train_address = ""
checked_in = []

total_buffer = 0
fail_buffer = 0
true_buffer = 0

def showdialog(train_buffer):
   msg = QMessageBox()
   msg.setIcon(QMessageBox.Information)

   msg.setText("Training comfirmation")
   msg.setInformativeText("20 image has been taken")
   msg.setWindowTitle("Comfirmation")
#    msg.setDetailedText("The details are as follows:")
   msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
   msg.buttonClicked.connect(lambda: msgbtn(train_buffer))
	
   retval = msg.exec_()
   print ( "value of pressed message box button:", retval)
	
def msgbtn(train_buffer):
    global train_mode,train_person,train_address
    # send_train_data = 
#     file_list = [  
#        ('Key_here', ('file_name1.jpg', open('file_path1.jpg', 'rb'), 'image/png')),
#        ('key_here', ('file_name2.jpg', open('file_path2.jpg', 'rb'), 'image/png'))
#    ]
 
    # response_pickled = jsonpickle.encode(send_train_data)
    r = requests.post(train_url, json={"name" : train_person, "address": train_address,"data" : train_buffer} )
    train_mode = False
    # roll, done2 = QtWidgets.QInputDialog.getInt( 
    #      'Input Dialog', 'Enter your roll:')   

    # cgpa, done3 = QtWidgets.QInputDialog.getDouble( 
    #          'Input Dialog', 'Enter your CGPA:') 

    # langs =['C', 'c++', 'Java', 'Python', 'Javascript'] 
    # lang, done4 = QtWidgets.QInputDialog.getItem( 
    #      'Input Dialog', 'Language you know:', langs) 

    # if done1 and done2 and done3 and done4 : 
    #         # Showing confirmation message along 
    #         # with information provided by user.  
    #         self.label.setText('Information stored Successfully\nName: '
    #                             +str(name)+'('+str(roll)+')'+'\n'+'CGPA: '
    #                             +str(cgpa)+'\nSelected Language: '+str(lang))    

    #         # Hide the pushbutton after inputs provided by the use. 
    #         self.pushButton.hide()       

class RecordVideo(QtCore.QObject):
    image_data = QtCore.pyqtSignal(np.ndarray)
    global ui,total_buffer,true_buffer,fail_buffer
    def __init__(self, camera_port=0, parent=None):
        super().__init__(parent)
        self.camera = cv2.VideoCapture(-1)

        self.timer = QtCore.QBasicTimer()

    def start_recording(self):
        self.timer.start(0, self)

    def end_recording(self):
        self.timer.stop()

    def timerEvent(self, event):
        global get_url,total_buffer,true_buffer,fail_buffer
        if (event.timerId() != self.timer.timerId()):
            return

        read, data = self.camera.read()
        if read:
            img = cv2.resize(data,(640,480))
            
            
            _, img_encoded = cv2.imencode('.jpg', img)
            if((train_mode == False) & (run_mode == True)):
                response = requests.post(test_url, data=img_encoded.tostring(), headers=headers)
                data = response.json()
                 

                print(data)
                # ui.checkinList.clear()

                if(data[0] > 0):
                    for j in range(1,len(data) - 1, 1):
                        name = ""
                        time = data[len(data) - 1]
                        for i,x in enumerate(data[j].values()):
                            if (i == 0):
                                name = x
                            if (i == 1):
                                cv2.rectangle(img,(x[0],x[1]),(x[2],x[3]),(0,0,255), thickness=2)
                                cv2.putText(img, name, (x[0], x[1]-10), cv2.FONT_HERSHEY_COMPLEX_SMALL,1, (0,255,0), thickness=1, lineType=2)
                            if (i == 2):
                                if(x == 'N'):
                                    checked_in.append(name)
                                    item = QtWidgets.QListWidgetItem(ui.checkinList)
                                    
                                    item_widget = CustomWidget(name, time)
                                    item.setSizeHint(item_widget.size())
                                    ui.checkinList.addItem(item)
                                    ui.checkinList.setItemWidget(item, item_widget)
                        if(name == 'Tung'):
                            true_buffer += 1
                        else:
                            cv2.imwrite("./fail/fail" + str(true_buffer) + ".jpg",img)
                    fail_buffer += 1 
                else:
                    cv2.imwrite("./fail/fail" + str(fail_buffer)+ ".jpg",img)
                total_buffer += 1
                if(total_buffer == 100):
                    print("accurancy ", true_buffer/100)
                    # print("recall ", true_buffer/(true_buffer))
            self.image_data.emit(img)
  
class FaceDetectionWidget(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.classifier = cv2.CascadeClassifier("./front_face.xml")
        self.image = QtGui.QImage()
        self._red = (0, 255, 255)
        self._width = 2
        self._min_size = (640,480)
        self.setFixedSize(640,480)
        self.train_buffer = []
    def detect_faces(self, image: np.ndarray):
        # haarclassifiers work better in black and white
        gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        gray_image = cv2.equalizeHist(gray_image)

        faces = self.classifier.detectMultiScale(gray_image)

        return faces

    def image_data_slot(self, image_data):
        faces = self.detect_faces(image_data)
        if(train_mode == True):
            if(len(faces) > 0 & len(self.train_buffer)< 20):
                self.train_buffer.append(image_data.tolist())

            for (x, y, w, h) in faces:
                cv2.rectangle(image_data,
                            (x, y),
                            (x+w, y+h),
                            self._red,
                            self._width)

            if(len(self.train_buffer) == 20):
                showdialog(self.train_buffer)
                self.train_buffer.clear()

        self.image = self.get_qimage(image_data)
        if self.image.size() != self.size():
            self.setFixedSize(640,480)

        self.update()

    def get_qimage(self, image: np.ndarray):
        height, width, colors = image.shape
        bytesPerLine = 3 * width
        QImage = QtGui.QImage

        image = QImage(image.data,
                       width,
                       height,
                       bytesPerLine,
                       QImage.Format_RGB888)

        image = image.rgbSwapped()


        return image

    def paintEvent(self, event):
        painter = QtGui.QPainter(self)
        
        painter.drawImage(0, 0, self.image)
        self.image = QtGui.QImage()


# class SpecialProcess(QThread):
#     universeChanged = pyqtSignal(list)

#     def __init__(self):
#         super(SpecialProcess, self).__init__()
#         self.start()

#     def run(self):
#         r = requests.get(url = get_url, params = "")
        
#         self.universeChanged.emit(r.json())
#         sleep(0.1)
#         self.run()
def run_mode_toggle():
    global run_mode
    run_mode = not run_mode
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(943, 756)

        self.face_detection_widget = FaceDetectionWidget()
        self.record_video = RecordVideo()

        image_data_slot = self.face_detection_widget.image_data_slot
        self.record_video.image_data.connect(image_data_slot)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 931, 711))
        self.tabWidget.setObjectName("tabWidget")
        self.Tab = QtWidgets.QWidget()
        self.Tab.setObjectName("Tab")

        # self.pushButton_5 = QtWidgets.QPushButton(self.Tab)
        # self.pushButton_5.setGeometry(QtCore.QRect(400, 460, 89, 25))
        # self.pushButton_5.setObjectName("pushButton_5")

        self.pushButton_2 = QtWidgets.QPushButton(self.Tab)
        self.pushButton_2.setGeometry(QtCore.QRect(340, 460, 89, 25))
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_1 = QtWidgets.QPushButton(self.Tab)
        self.pushButton_1.setGeometry(QtCore.QRect(259, 460, 89, 25))
        self.pushButton_1.setObjectName("pushButton_1")

        self.pushButton = QtWidgets.QPushButton(self.Tab)
        self.pushButton.setGeometry(QtCore.QRect(170, 460, 89, 25))
        self.pushButton.setObjectName("pushButton")

        self.groupBox_2 = QtWidgets.QGroupBox(self.Tab)
        self.groupBox_2.setGeometry(QtCore.QRect(640, 10, 281, 541))

        # self.groupBox = QtWidgets.QGroupBox(self.Tab)
        # self.groupBox.setGeometry(QtCore.QRect(50, 30, 561, 411))
        # self.groupBox.setFlat(False)
        # self.groupBox.setObjectName("groupBox")

        # self.face_detection_widget.setGeometry(QtCore.QRect(0, 20, 561, 391))
        # self.label.setMaximumSize(QtCore.QSize(640, 480))
        

        self.horizontalLayoutWidget = QtWidgets.QWidget(self.Tab)
        
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(20, 40, 591, 411))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.addWidget(self.face_detection_widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        
        self.groupBox = QtWidgets.QGroupBox(self.Tab)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 611, 451))
        self.groupBox.setObjectName("groupBox")
        self.groupBox_2 = QtWidgets.QGroupBox(self.Tab)

        self.groupBox_2.setGeometry(QtCore.QRect(640, 10, 281, 541))
        self.groupBox_2.setObjectName("groupBox_2")


        self.checkinList = QtWidgets.QListWidget(self.groupBox_2)
        self.checkinList.setGeometry(QtCore.QRect(0, 20, 281, 521))
        self.checkinList.setObjectName("checkinList")

        self.groupBox_3 = QtWidgets.QGroupBox(self.Tab)
        self.groupBox_3.setGeometry(QtCore.QRect(70, 490, 551, 161))
        self.groupBox_3.setObjectName("groupBox_3")
        self.label_2 = QtWidgets.QLabel(self.groupBox_3)
        self.label_2.setGeometry(QtCore.QRect(20, 50, 341, 16))
        self.label_2.setObjectName("label_2")
        self.tabWidget.addTab(self.Tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.label_3 = QtWidgets.QLabel(self.tab_2)
        self.label_3.setGeometry(QtCore.QRect(50, 80, 531, 361))
        self.label_3.setMaximumSize(QtCore.QSize(640, 480))

        self.label_3.setObjectName("label_3")
        self.checkinList_2 = QtWidgets.QListView(self.tab_2)
        self.checkinList_2.setGeometry(QtCore.QRect(710, 40, 261, 471))
        self.checkinList_2.setObjectName("checkinList_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_3.setGeometry(QtCore.QRect(380, 490, 89, 25))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_4.setGeometry(QtCore.QRect(230, 490, 89, 25))

        self.pushButton.clicked.connect(self.record_video.start_recording)
        self.pushButton_1.clicked.connect(run_mode_toggle)
        self.pushButton_2.clicked.connect(self.showDialog)

        self.pushButton_4.setObjectName("pushButton_4")

        self.label_4 = QtWidgets.QLabel(self.tab_2)
        self.label_4.setGeometry(QtCore.QRect(190, 560, 551, 16))
        self.label_4.setObjectName("label_4")
        self.tabWidget.addTab(self.tab_2, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1090, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        # self.pushButton_5.setText(_translate("MainWindow", "Off mode"))
        self.pushButton_2.setText(_translate("MainWindow", "Training"))
        self.pushButton_1.setText(_translate("MainWindow", "Run"))
        self.pushButton.setText(_translate("MainWindow", "Start"))
        self.groupBox.setTitle(_translate("MainWindow", "Video"))
        # self.label.setText(_translate("MainWindow", "IMG"))
        self.groupBox_2.setTitle(_translate("MainWindow", "List"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Error log"))
        self.label_2.setText(_translate("MainWindow", "Error"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Tab), _translate("MainWindow", "Runing Mode"))
        self.label_3.setText(_translate("MainWindow", "IMG"))
        self.pushButton_3.setText(_translate("MainWindow", "Training"))
        self.pushButton_4.setText(_translate("MainWindow", "Start"))
        self.label_4.setText(_translate("MainWindow", "Error"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Training Mode"))
    def showDialog(self,Ui_MainWindow):
        global train_mode,train_person,train_address 
        
        text, ok = QInputDialog.getText(MainWindow, 'Input Dialog',
                                        'Enter your name:')
        if ok:
            train_person = text
  
        text, ok = QInputDialog.getText(MainWindow, 'Input Dialog',
                                        'Enter your address:')
        if ok:
            train_address = text
        train_mode = True
from PyQt5.QtGui import QPixmap
class CustomWidget(QtWidgets.QWidget):
    def __init__(self, user, time, *args, **kwargs):
        QtWidgets.QWidget.__init__(self, *args, **kwargs)
        self.user = user
        self.setGeometry(QtCore.QRect(0, 0, 211, 30))
        self.horizontalLayout = QtWidgets.QHBoxLayout(self)
        self.horizontalLayout.setContentsMargins(1, 1, 1, 1)
        self.horizontalLayout.setObjectName("horizontalLayout")
        # self.UserImage = QtWidgets.QLabel(self)
        self.UserImage = QtWidgets.QLabel(self)
        self.UserImage.setPixmap(QPixmap("./icon.png").scaled(35, 35, QtCore.Qt.KeepAspectRatio))
        # self.UserImage.setText("This is an Image")
        # self.UserImage.setObjectName("UserImage")
        self.horizontalLayout.addWidget(self.UserImage)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.UserName = QtWidgets.QLabel(self)
        self.UserName.setText(user)
        self.UserName.setObjectName("UserName")
        self.verticalLayout.addWidget(self.UserName)
        self.UserStatus = QtWidgets.QLabel(self)
        self.UserStatus.setText(time)
        self.UserStatus.setObjectName("UserStatus")
        self.verticalLayout.addWidget(self.UserStatus)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setStretch(1, 3)
        # self.horizontalLayout.setFixedSize(200,40)
ui = Ui_MainWindow()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    
    ui.setupUi(MainWindow)

    # t = perpetualTimer(0.5,printer)
    # t.start()
    r = requests.get(url = get_url, params = "")
    data = r.json()
    if(len(data) > 0):
        for j in range(len(data)):
            name = ""
            time = ""
            for i,x in enumerate(data[j].values()):
                if (i == 0):
                    # ui.checkinList.addItem(x)
                    name = x
                if (i == 1):
                    time = x
            item = QtWidgets.QListWidgetItem(ui.checkinList)
            
            item_widget = CustomWidget(name, time)
            item.setSizeHint(item_widget.size() + QtCore.QSize(5,5))
            ui.checkinList.addItem(item)
            ui.checkinList.setItemWidget(item, item_widget)
    
    MainWindow.show()
    sys.exit(app.exec_())
